image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/metricbeat
daemonset:
  annotations:
    name: metricbeat
  labels:
    k8s-app: metricbeat
  enabled: true
  extraEnvs:
    - name: ELASTICSEARCH_HOSTS
      value: "elasticsearch-proxy:9200"
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: NODE_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
  hostNetworking: true
  #dnsPolicy: ClusterFirstWithHostNet
  metricbeatConfig:
    metricbeat.yml: |
      metricbeat.modules:
      - module: prometheus
        period: 1m
        hosts: ["kubecost-prometheus-server"]
        metricsets: ["query"]
        queries:
        - name: "pod_ram_gb_hours_allocation"
          path: "/api/v1/query"
          params:
            query: 'avg(avg_over_time(container_memory_allocation_bytes{container!="", container!="POD", node!=""}[1h])) by (pod, namespace, node) / 1024 / 1024 / 1024 + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!="",label_labels_appmanager_oam_dev_appInstanceId!=""})'
        - name: "pod_ram_gb_hours_usage_avg"
          path: "/api/v1/query"
          params:
            query: 'avg(avg_over_time(container_memory_working_set_bytes{container!="", container_name!="POD", container!="POD"}[1h])) by (pod, namespace) / 1024 / 1024 / 1024 + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!="",label_labels_appmanager_oam_dev_appInstanceId!=""})'
        - name: "pod_cpu_core_hours_allocation"
          path: "/api/v1/query"
          params:
            query: 'avg(avg_over_time(container_cpu_allocation{container!="", container!="POD", node!=""}[1h])) by (pod, namespace, node) + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!="",label_labels_appmanager_oam_dev_appInstanceId!=""})'
        - name: "pod_cpu_core_hours_usage_avg"
          path: "/api/v1/query"
          params:
            query: 'avg(rate(container_cpu_usage_seconds_total{container!="", container_name!="POD", container!="POD"}[1h])) by (pod, namespace) + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!="",label_labels_appmanager_oam_dev_appInstanceId!=""})'
        - name: "pod_pvc_gb_hours_allocation"
          path: "/api/v1/query"
          params:
            query: 'avg(avg_over_time(pod_pvc_allocation[1h])) by (pod, namespace) / 1024 / 1024 / 1024 + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!="",label_labels_appmanager_oam_dev_appInstanceId!=""})'
      - module: kubernetes
        metricsets:
          - container
          - node
          - pod
          - system
          - volume
        period: 1m
        host: "${NODE_NAME}"
        hosts: ["https://${NODE_IP}:10250"]
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        ssl.verification_mode: "none"
        # If using Red Hat OpenShift remove ssl.verification_mode entry and
        # uncomment these settings:
        ssl.certificate_authorities:
          - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        processors:
        - add_kubernetes_metadata: ~
      - module: kubernetes
        enabled: true
        metricsets:
          - event
      - module: kubernetes
        metricsets:
          - proxy
        period: 1m
        host: ${NODE_NAME}
        hosts: ["localhost:10249"]
      - module: system
        period: 1m
        metricsets:
          - cpu
          - load
          - memory
          - network
          - process
          - process_summary
        cpu.metrics: [percentages, normalized_percentages]
        processes: ['.*']
        process.include_top_n:
          by_cpu: 5
          by_memory: 5
      - module: system
        period: 1m
        metricsets:
          - filesystem
          - fsstat
        processors:
        - drop_event.when.regexp:
            system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'

      metricbeat.autodiscover:
        providers:
          - type: kubernetes
            scope: node
            node: ${NODE_NAME}
            include_labels: ["sreworks-telemetry-metric"]
            resource: service
            templates:
              - condition:
                  equals:
                    kubernetes.labels.sreworks-telemetry-metric: enable
                config:
                  - module: http
                    metricsets:
                      - json
                    period: 1m
                    hosts: ["http://${data.host}:10080"]
                    namespace: "${data.kubernetes.namespace}#${data.kubernetes.service.name}"
                    path: "/"
                    method: "GET"

          - type: kubernetes
            scope: cluster
            node: ${NODE_NAME}
            unique: true
            include_labels: ["sreworks-prometheus-scrape-metric"]
            templates:
              - condition:
                  - equals:
                      kubernetes.labels.sreworks-prometheus-scrape-metric: enable
                config:
                  - module: prometheus
                    period: 1m
                    hosts: ["${data.host}:${data.port}"]
                    metrics_path: /metrics

          - type: kubernetes
            scope: cluster
            node: ${NODE_NAME}
            unique: true
            templates:
              - config:
                  - module: kubernetes
                    hosts: ["kubecost-kube-state-metrics.sreworks-client.svc.cluster.local:8080"]
                    period: 1m
                    add_metadata: true
                    metricsets:
                      - state_node
                      - state_deployment
                      - state_daemonset
                      - state_replicaset
                      - state_pod
                      - state_container
                      - state_cronjob
                      - state_resourcequota
                      - state_statefulset
                      - state_service

      processors:
        - add_cloud_metadata:
    
      setup.ilm.enabled: auto
      setup.ilm.rollover_alias: "metricbeat"
      setup.ilm.pattern: "{now/d}-000001"
      setup.template.name: "metricbeat"
      setup.template.pattern: "metricbeat-*"

      output.elasticsearch:
        hosts: 'elasticsearch-proxy:9200'
        index: "metricbeat-%{+yyyy.MM.dd}"

  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1000m"
      memory: "500Mi"
deployment:
  enabled: false

kube_state_metrics:
  enabled: false

clusterRoleRules:
- apiGroups: [""]
  resources:
  - nodes
  - namespaces
  - events
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  - deployments
  - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - nodes/stats
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- nonResourceURLs:
    - "/metrics"
  verbs:
    - get
- apiGroups:
    - coordination.k8s.io
  resources:
    - leases
  verbs:
    - '*'

serviceAccount: "metricbeat-sa"
