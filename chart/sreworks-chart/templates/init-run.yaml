{{- if eq .Values.installMode "default" -}}

apiVersion: v1
data:
  core.sh: |

    set -e
    set -x
    
    cat /swcli/swcli.yaml

    #cd /root

    #if [ ! -d sreworks-flycore ]; then
    #    mkdir sreworks-flycore
    #fi
    #cd sreworks-flycore

    cd /root/saas/swcore/api/core/


    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then

        # build&launch paas
        export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
        envsubst < /root/saas/swcore/api/core/build.yaml.tpl > build.yaml

        if [[ "$ACCESS_MODE" == "ingress" ]] ; then
           envsubst < /root/saas/swcore/api/core/launch.yaml.tpl > launch.yaml
        else
           envsubst < /root/saas/swcore/api/core/launch-nodeport.yaml.tpl > launch.yaml
        fi

        cat build.yaml
        cat launch.yaml
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=${CORE_APP_ID} --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./launch.yaml --disable-dir-check 

    else
    
        export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)

        if [[ "$ACCESS_MODE" == "ingress" ]] ; then
           envsubst < /root/saas/swcore/api/core/launch.yaml.tpl > /root/saas/swcore/launch.yaml
        else
           envsubst < /root/saas/swcore/api/core/launch-nodeport.yaml.tpl > /root/saas/swcore/launch.yaml
        fi

        result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id=${CORE_APP_ID} --filepath /root/saas/swcore/flycore.zip --print-only-app-package-id=true --reset-version=true)
        /root/swcli --config /swcli/swcli.yaml deployment launch --app-id=${CORE_APP_ID} --stage=prod --namespace=${NAMESPACE_ID} --path /root/saas/swcore/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi


    if [[ "$IMPORT_FRONTEND" == "true" ]] ; then

        sh /app/core-action-service-check.sh
        
        # import&launch saas desktop
        envsubst < /root/saas/desktop/launch-v2.yaml.tpl > /root/saas/desktop/launch.yaml
        envsubst < /root/saas/desktop/launch-v2-dev.yaml.tpl > /root/saas/desktop/launch-dev.yaml

        if [[ "$ONLY_BASE" == "true" ]] ; then
           result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id desktop --filepath /root/saas/desktop/ui/desktop-nosearch.zip --print-only-app-package-id=true --reset-version=true)
        else
           result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id desktop --filepath /root/saas/desktop/ui/desktop-auto.zip --print-only-app-package-id=true --reset-version=true)
        fi
        /root/swcli --config /swcli/swcli.yaml deployment launch --app-id desktop --stage=prod --namespace=${NAMESPACE_ID} --path /root/saas/desktop/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master  
        /root/swcli --config /swcli/swcli.yaml deployment launch --app-id desktop --stage=dev --namespace=${NAMESPACE_ID} --path /root/saas/desktop/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master  
   
        # import&launch saas swadmin
        python /app/pack.py --src /root/saas/swadmin/build --dest /root/saas/swadmin/build.zip
        envsubst < /root/saas/swadmin/build/launch-frontend.yaml.tpl > /root/saas/swadmin/launch-frontend.yaml
        envsubst < /root/saas/swadmin/build/launch-frontend-dev.yaml.tpl > /root/saas/swadmin/launch-frontend-dev.yaml
        result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id swadmin --filepath /root/saas/swadmin/build.zip --print-only-app-package-id=true --reset-version=true)
        /root/swcli --config /swcli/swcli.yaml deployment launch --app-id swadmin --path /root/saas/swadmin/launch-frontend.yaml --stage=prod --namespace=${NAMESPACE_ID} --app-package-id $result --arch x86 --wait=true --cluster master
        /root/swcli --config /swcli/swcli.yaml deployment launch --app-id swadmin --path /root/saas/swadmin/launch-frontend-dev.yaml --stage dev --namespace=${NAMESPACE_ID} --app-package-id $result --arch x86 --wait=true --cluster master

        # import&launch saas template
        python /app/pack.py --src /root/saas/template/build --dest /root/saas/template/build.zip
        envsubst < /root/saas/template/build/launch-frontend.yaml.tpl > /root/saas/template/launch-frontend.yaml
        envsubst < /root/saas/template/build/launch-frontend-dev.yaml.tpl > /root/saas/template/launch-frontend-dev.yaml
        result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id template --filepath /root/saas/template/build.zip --print-only-app-package-id=true --reset-version=true)
        /root/swcli --config /swcli/swcli.yaml deployment launch --app-id template --path /root/saas/template/launch-frontend.yaml --stage=prod --namespace=${NAMESPACE_ID} --app-package-id $result --arch x86 --wait=true --cluster master
        /root/swcli --config /swcli/swcli.yaml deployment launch --app-id template --path /root/saas/template/launch-frontend-dev.yaml --stage dev --namespace=${NAMESPACE_ID} --app-package-id $result --arch x86 --wait=true --cluster master


    fi
     

  core-deploy-check.sh: |
    while true
    do
        CORE=$(/root/swcli --config /swcli/swcli.yaml deployment list --app-id=${CORE_APP_ID} --page=1 --page-size=1 -j|awk -F 'deployStatus":"' '{print $2}'|awk -F '"' '{print $1}')
        if [[ "$CORE" == "SUCCESS" ]] ; then
            echo "check flycore deploy success!"
            break
        else
            echo "wait flycore deploy, current: "$CORE
            sleep 5
        fi
    done

  core-action-service-check.sh: |
    while true
    do
        curl prod-flycore-paas-action
        if [[ "$?" == "0" ]]; then
           echo "action service is ok"
           break
        else
           echo "wait action service ready"
           sleep 5
        fi
    done

  saas-cluster.sh: |

    set -e
    set -x

    cd /root

    sh /app/core-deploy-check.sh
    
    # build&launch cluster api
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    envsubst < /root/saas/cluster/api/build.yaml.tpl > /root/saas/cluster/api/build.yaml
    envsubst < /root/saas/cluster/build/launch.yaml.tpl > /root/saas/cluster/launch.yaml
    envsubst < /root/saas/cluster/build/launch-backend.yaml.tpl > /root/saas/cluster/launch-backend.yaml
    envsubst < /root/saas/cluster/build/launch-frontend.yaml.tpl > /root/saas/cluster/launch-frontend.yaml
    envsubst < /root/saas/cluster/build/launch-frontend-dev.yaml.tpl > /root/saas/cluster/launch-frontend-dev.yaml
    python /app/pack.py --src /root/saas/cluster/build --dest /root/saas/cluster/build.zip


    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then

      cd /root/saas/cluster/api/
      /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=cluster --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=../launch-backend.yaml --disable-dir-check

      # wait flycore
      if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
      
          # import&launch cluster ui
          result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id cluster --filepath /root/saas/cluster/build.zip --print-only-app-package-id=true --reset-version=true)

          /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id cluster --path /root/saas/cluster/launch-frontend.yaml --app-package-id $result --arch x86 --wait=true --cluster master
          /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id cluster --path /root/saas/cluster/launch-frontend-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      fi

    else
      
      cd /root/saas/cluster/

      sh /app/core-action-service-check.sh
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id cluster --filepath /root/saas/cluster/build.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id cluster --path /root/saas/cluster/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id cluster --path /root/saas/cluster/launch-frontend-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi

  saas-app.sh: |

    set -e
    set -x

    sh /app/core-deploy-check.sh
   
    cd /root

    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    envsubst < /root/saas/app/api/build.yaml.tpl > /root/saas/app/api/build.yaml
    envsubst < /root/saas/app/build/launch.yaml.tpl > /root/saas/app/launch.yaml
    envsubst < /root/saas/app/build/launch-backend.yaml.tpl > /root/saas/app/launch-backend.yaml
    envsubst < /root/saas/app/build/launch-frontend.yaml.tpl > /root/saas/app/launch-frontend.yaml
    envsubst < /root/saas/app/build/launch-frontend-dev.yaml.tpl > /root/saas/app/launch-frontend-dev.yaml
    python /app/pack.py --src /root/saas/app/build --dest /root/saas/app/build.zip
 
    
    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then

        cd /root/saas/app/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=app --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=../launch-backend.yaml --disable-dir-check

        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then

            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id app --filepath /root/saas/app/build.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id app --path /root/saas/app/launch-frontend.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id app --path /root/saas/app/launch-frontend-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi

    else

      cd /root/saas/app/

      sh /app/core-action-service-check.sh
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id app --filepath /root/saas/app/build.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id app --path /root/saas/app/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id app --path /root/saas/app/launch-frontend-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi

  saas-system.sh: |

    set -e
    set -x
    
    sh /app/core-deploy-check.sh

    cd /root
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    envsubst < /root/saas/system/api/build.yaml.tpl > /root/saas/system/api/build.yaml
    envsubst < /root/saas/system/api/launch.yaml.tpl > /root/saas/system/api/launch.yaml
    envsubst < /root/saas/system/ui/launch-v2.yaml.tpl > /root/saas/system/ui/launch.yaml
    envsubst < /root/saas/system/ui/launch-v2-dev.yaml.tpl > /root/saas/system/ui/launch-dev.yaml
     

    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then

        cd /root/saas/system/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=system --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./launch.yaml --disable-dir-check

        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            

            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id system --filepath /root/saas/system/ui/system-auto.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id system --path /root/saas/system/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id system --path /root/saas/system/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

        fi

    else

      cd /root/saas/system/

      sh /app/core-action-service-check.sh
      
      echo "" > merge-launch.yaml
      cat /root/saas/system/api/launch.yaml >> merge-launch.yaml
      echo "---" >> merge-launch.yaml
      cat /root/saas/system/ui/launch.yaml >> merge-launch.yaml
      cat merge-launch.yaml | python /app/reduce.py > launch.yaml
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id system --filepath /root/saas/system/system.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id system --path /root/saas/system/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id system --path /root/saas/system/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi


  saas-upload.sh: |

    set -e
    set -x
    
    sh /app/core-deploy-check.sh

    cd /root
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    envsubst < /root/saas/upload/api/build.yaml.tpl > /root/saas/upload/api/build.yaml
    envsubst < /root/saas/upload/api/launch.yaml.tpl > /root/saas/upload/api/launch.yaml
    envsubst < /root/saas/upload/ui/launch-v2.yaml.tpl > /root/saas/upload/ui/launch.yaml
    envsubst < /root/saas/upload/ui/launch-v2-dev.yaml.tpl > /root/saas/upload/ui/launch-dev.yaml
 
    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then

        cd /root/saas/upload/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=upload --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./launch.yaml --disable-dir-check

        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            

            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id upload --filepath /root/saas/upload/ui/upload-auto.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id upload --path /root/saas/upload/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id upload --path /root/saas/upload/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi

    else
      cd /root/saas/upload/

      sh /app/core-action-service-check.sh
      
      echo "" > merge-launch.yaml
      cat /root/saas/upload/api/launch.yaml >> merge-launch.yaml
      echo "---" >> merge-launch.yaml
      cat /root/saas/upload/ui/launch.yaml >> merge-launch.yaml
      cat merge-launch.yaml | python /app/reduce.py > launch.yaml
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id upload --filepath /root/saas/upload/upload.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id upload --path /root/saas/upload/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id upload --path /root/saas/upload/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi

    
  reduce.py: |
    import sys
    import yaml
    import json
    from functools import reduce

    def merge(a, b):
        if b is None:
            return a
        if a is None:
            return b
        parameterValues = [x["name"] for x in a.get("spec").get("parameterValues")]
        for p in b.get("spec",{}).get("parameterValues",[]):
            if p["name"] in parameterValues: continue
            if p["name"] == "COMPONENT_NAME": continue
            a["spec"]["parameterValues"].append(p)
        a["spec"]["components"] += b["spec"]["components"]
        return a

    res = reduce(merge, [yaml.safe_load(raw) for raw in sys.stdin.read().strip().split("---")])
    print(yaml.dump(res))

  pack.py: |
    import shutil
    import tempfile
    import os
    import argparse

    parser = argparse.ArgumentParser(description='package tool')
    parser.add_argument("-s",'--src', type=str, dest="src", required=True)
    parser.add_argument("-d",'--dest', type=str, dest="dest", required=True)
    args = parser.parse_args()

    packagePath = tempfile.mkdtemp()
    targetPath = packagePath + "/target"

    shutil.copytree(args.src, targetPath)

    for path in os.listdir(targetPath):
        if path.endswith(".zip.dir"):
            shutil.make_archive(targetPath + "/" + path.split(".zip")[0], 'zip', targetPath + "/" + path)
            shutil.rmtree(targetPath + "/" + path)


    shutil.make_archive(args.dest.split(".zip")[0], 'zip', targetPath + "/")
 
 
  saas-dataops.sh: |
    set -e
    set -x 
    
    sh /app/core-deploy-check.sh

    cd /root
    export NAMESPACE_ID=${NAMESPACE_DATAOPS}
    export NODE_NAME='$''{''NODE_NAME''}'
    export NODE_IP='$''{''NODE_IP''}'
 
    echo "" > tmp-merge-build.yaml
    echo "" > tmp-merge-launch.yaml

    split(){
        cat tmp-build.yaml >> tmp-merge-build.yaml
        cat tmp-launch.yaml >> tmp-merge-launch.yaml
        echo "---" >> tmp-merge-build.yaml
        echo "---" >> tmp-merge-launch.yaml
    }


    # mysql地址如果从外部传入就不拉起mysql
    if [[ "$DATAOPS_DB_HOST" == "prod-dataops-mysql.sreworks-dataops" ]]
    then
      envsubst < /root/saas/dataops/api/mysql/build.yaml.tpl > tmp-build.yaml
      envsubst < /root/saas/dataops/api/mysql/launch.yaml.tpl > tmp-launch.yaml
      split
    fi

    if [[ "$DATA_ES_HOST" == "prod-dataops-elasticsearch-master.sreworks-dataops" ]]
    then
       envsubst < /root/saas/dataops/api/elasticsearch/build.yaml.tpl > tmp-build.yaml
       envsubst < /root/saas/dataops/api/elasticsearch/launch.yaml.tpl > tmp-launch.yaml
       split
    fi


    envsubst < /root/saas/dataops/api/grafana/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/grafana/launch.yaml.tpl > tmp-launch.yaml
    split

    envsubst < /root/saas/dataops/api/kibana/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/kibana/launch.yaml.tpl > tmp-launch.yaml
    split    

    envsubst < /root/saas/dataops/api/metricbeat/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/metricbeat/launch.yaml.tpl > tmp-launch.yaml
    split

    envsubst < /root/saas/dataops/api/filebeat/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/filebeat/launch.yaml.tpl > tmp-launch.yaml
    split

    envsubst < /root/saas/dataops/api/skywalking/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/skywalking/launch.yaml.tpl > tmp-launch.yaml
    split

    envsubst < /root/saas/dataops/api/prometheus/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/prometheus/launch.yaml.tpl > tmp-launch.yaml
    split

    #envsubst < /root/saas/dataops/api/mongodb/build.yaml.tpl > tmp-build.yaml
    #envsubst < /root/saas/dataops/api/mongodb/launch.yaml.tpl > tmp-launch.yaml
    #split

    envsubst < /root/saas/dataops/api/ververica-platform/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/ververica-platform/launch.yaml.tpl > tmp-launch.yaml
    split

    envsubst < /root/saas/dataops/api/logstash/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/logstash/launch.yaml.tpl > tmp-launch.yaml
    split

    envsubst < /root/saas/dataops/api/build.yaml.tpl > tmp-build.yaml
    envsubst < /root/saas/dataops/api/launch.yaml.tpl > tmp-launch.yaml
    split

    cat tmp-merge-build.yaml | python -c 'import sys;print("\n---\n".join([raw.strip() for raw in sys.stdin.read().strip().split("---") if raw.strip()]))' > merge-build.yaml
    cat tmp-merge-launch.yaml | python /app/reduce.py > merge-launch.yaml
    
    mv merge-build.yaml build.yaml

    envsubst < /root/saas/dataops/ui/data/launch-v2.yaml.tpl > /root/saas/dataops/ui/data/launch.yaml
    envsubst < /root/saas/dataops/ui/data/launch-v2-dev.yaml.tpl > /root/saas/dataops/ui/data/launch-dev.yaml

    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then 
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --stage=prod --app-id=dataops --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./merge-launch.yaml --disable-dir-check

        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            
            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id dataops --filepath /root/saas/dataops/ui/data/data-auto.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id dataops --path /root/saas/dataops/ui/data/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id dataops --path /root/saas/dataops/ui/data/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi
    else
        cd /root/saas/dataops/

        sh /app/core-action-service-check.sh
      
        echo "" > merge-launch.yaml
        cat /root/merge-launch.yaml >> merge-launch.yaml
        echo "---" >> merge-launch.yaml
        cat /root/saas/dataops/ui/data/launch.yaml >> merge-launch.yaml
        cat merge-launch.yaml | python /app/reduce.py > launch.yaml
      
        result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id dataops --filepath /root/saas/dataops/data.zip --print-only-app-package-id=true --reset-version=true)

        /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id dataops --path /root/saas/dataops/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id dataops --path /root/saas/dataops/ui/data/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi

  saas-team.sh: |

    set -e
    set -x
    
    sh /app/core-deploy-check.sh

    cd /root

    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    envsubst < /root/saas/team/api/build.yaml.tpl > /root/saas/team/api/build.yaml
    envsubst < /root/saas/team/api/launch.yaml.tpl > /root/saas/team/api/launch.yaml
    envsubst < /root/saas/team/ui/launch-v2.yaml.tpl > /root/saas/team/ui/launch.yaml
    envsubst < /root/saas/team/ui/launch-v2-dev.yaml.tpl > /root/saas/team/ui/launch-dev.yaml
 

    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then
    
        cd /root/saas/team/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --stage=prod --namespace=${NAMESPACE_ID} --app-id=team --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./launch.yaml --disable-dir-check

        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            
            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id team --filepath /root/saas/team/ui/team-auto.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id team --path /root/saas/team/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id team --path /root/saas/team/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi
    else

      cd /root/saas/team/

      sh /app/core-action-service-check.sh
      
      echo "" > merge-launch.yaml
      cat /root/saas/team/api/launch.yaml >> merge-launch.yaml
      echo "---" >> merge-launch.yaml
      cat /root/saas/team/ui/launch.yaml >> merge-launch.yaml
      cat merge-launch.yaml | python /app/reduce.py > launch.yaml
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id team --filepath /root/saas/team/team.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id team --path /root/saas/team/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id team --path /root/saas/team/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi



  saas-aiops.sh: |

    set -e
    set -x 

    cd /root
    sh /app/core-deploy-check.sh
    export NAMESPACE_ID=${NAMESPACE_AIOPS}

    if [[ "$DATAOPS_DB_HOST" == "default-mysql" ]]
    then
      DATAOPS_DB_HOST='\{\{ Global.STAGE_ID \}\}-\{\{ Global.APP_ID \}\}-mysql.sreworks-dataops'
      export DATAOPS_DB_HOST=$(echo $DATAOPS_DB_HOST|sed 's/\\//g')
    fi 

    envsubst < /root/saas/aiops/api/build.yaml.tpl > /root/saas/aiops/api/build.yaml
    envsubst < /root/saas/aiops/api/launch.yaml.tpl > /root/saas/aiops/api/launch.yaml
    envsubst < /root/saas/aiops/ui/launch-v2.yaml.tpl > /root/saas/aiops/ui/launch.yaml
    envsubst < /root/saas/aiops/ui/launch-v2-dev.yaml.tpl > /root/saas/aiops/ui/launch-dev.yaml
    

    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then

        cd /root/saas/aiops/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=aiops --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./launch.yaml --disable-dir-check


        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            
            sh /app/core-deploy-check.sh

            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id aiops --filepath /root/saas/aiops/ui/aiops-auto.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id aiops --path /root/saas/aiops/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id aiops --path /root/saas/aiops/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi

    else

      cd /root/saas/aiops/

      sh /app/core-action-service-check.sh
      
      echo "" > merge-launch.yaml
      cat /root/saas/aiops/api/launch.yaml >> merge-launch.yaml
      echo "---" >> merge-launch.yaml
      cat /root/saas/aiops/ui/launch.yaml >> merge-launch.yaml
      cat merge-launch.yaml | python /app/reduce.py > launch.yaml
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id aiops --filepath /root/saas/aiops/aiops.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id aiops --path /root/saas/aiops/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id aiops --path /root/saas/aiops/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi


  saas-job.sh: |

    set -e
    set -x 
    
    sh /app/core-deploy-check.sh

    cd /root

    # build&launch cluster api
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    envsubst < /root/saas/job/api/build.yaml.tpl > /root/saas/job/api/build.yaml
    envsubst < /root/saas/job/build/launch.yaml.tpl > /root/saas/job/launch.yaml
    envsubst < /root/saas/job/build/launch-backend.yaml.tpl > /root/saas/job/launch-backend.yaml
    envsubst < /root/saas/job/build/launch-frontend.yaml.tpl > /root/saas/job/launch-frontend.yaml
    envsubst < /root/saas/job/build/launch-frontend-dev.yaml.tpl > /root/saas/job/launch-frontend-dev.yaml
    python /app/pack.py --src /root/saas/job/build --dest /root/saas/job/build.zip

    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then
    
        cd /root/saas/job/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=job --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=../launch-backend.yaml --disable-dir-check

        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            

            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id job --filepath /root/saas/job/build.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id job --path /root/saas/job/launch-frontend.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id job --path /root/saas/job/launch-frontend-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi

    else


      cd /root/saas/job/

      sh /app/core-action-service-check.sh
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id job --filepath /root/saas/job/build.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id job --path /root/saas/job/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id job --path /root/saas/job/launch-frontend-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master


    fi


  saas-healing.sh: |

    set -e
    set -x 
    
    sh /app/core-deploy-check.sh

    cd /root

    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    
    if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
        

        envsubst < /root/saas/healing/ui/launch-v2.yaml.tpl > /root/saas/healing/ui/launch.yaml
        envsubst < /root/saas/healing/ui/launch-v2-dev.yaml.tpl > /root/saas/healing/ui/launch-dev.yaml
        result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id healing --filepath /root/saas/healing/ui/healing-auto.zip --print-only-app-package-id=true --reset-version=true)

        /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id healing --path /root/saas/healing/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id healing --path /root/saas/healing/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
    fi

  saas-health.sh: |

    set -e
    set -x 
    
    sh /app/core-deploy-check.sh

    cd /root
    
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)

    if [[ "$DATAOPS_DB_HOST" == "default-mysql" ]]
    then
      DATAOPS_DB_HOST='\{\{ Global.STAGE_ID \}\}-\{\{ Global.APP_ID \}\}-mysql.sreworks-dataops'
      export DATAOPS_DB_HOST=$(echo $DATAOPS_DB_HOST|sed 's/\\//g')
    fi

    envsubst < /root/saas/health/api/build.yaml.tpl > /root/saas/health/api/build.yaml
    envsubst < /root/saas/health/api/launch.yaml.tpl > /root/saas/health/api/launch.yaml
    envsubst < /root/saas/health/ui/launch-v2.yaml.tpl > /root/saas/health/ui/launch.yaml
    envsubst < /root/saas/health/ui/launch-v2-dev.yaml.tpl > /root/saas/health/ui/launch-dev.yaml
    
    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then
    
        cd /root/saas/health/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=health --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./launch.yaml --disable-dir-check


        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            

            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id health --filepath /root/saas/health/ui/health-auto.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id health --path /root/saas/health/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id health --path /root/saas/health/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi

    else

      cd /root/saas/health/

      sh /app/core-action-service-check.sh
      
      echo "" > merge-launch.yaml
      cat /root/saas/health/api/launch.yaml >> merge-launch.yaml
      echo "---" >> merge-launch.yaml
      cat /root/saas/health/ui/launch.yaml >> merge-launch.yaml
      cat merge-launch.yaml | python /app/reduce.py > launch.yaml
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id health --filepath /root/saas/health/health.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id health --path /root/saas/health/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id health --path /root/saas/health/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi



  saas-ocenter.sh: |

    set -e
    set -x 

    sh /app/core-deploy-check.sh
    
    cd /root
    
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)

    if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
        

        envsubst < /root/saas/ocenter/ui/launch-v2.yaml.tpl > /root/saas/ocenter/ui/launch.yaml
        envsubst < /root/saas/ocenter/ui/launch-v2-dev.yaml.tpl > /root/saas/ocenter/ui/launch-dev.yaml
        result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id ocenter --filepath /root/saas/ocenter/ui/ocenter-auto.zip --print-only-app-package-id=true --reset-version=true)

        /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id ocenter --path /root/saas/ocenter/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id ocenter --path /root/saas/ocenter/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
    fi

  saas-help.sh: |

    set -e
    set -x 

    sh /app/core-deploy-check.sh
    
    cd /root
    
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)

    if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
        

        envsubst < /root/saas/help/ui/launch-v2.yaml.tpl > /root/saas/help/ui/launch.yaml
        envsubst < /root/saas/help/ui/launch-v2-dev.yaml.tpl > /root/saas/help/ui/launch-dev.yaml
        result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id help --filepath /root/saas/help/ui/help-auto.zip --print-only-app-package-id=true --reset-version=true)

        /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id help --path /root/saas/help/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id help --path /root/saas/help/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
    fi


  saas-search.sh: |

    set -e
    set -x 
    
    sh /app/core-deploy-check.sh

    cd /root

    # build&launch search api
    export NAMESPACE_ID=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    envsubst < /root/saas/search/api/build.yaml.tpl > /root/saas/search/api/build.yaml
    envsubst < /root/saas/search/api/launch.yaml.tpl > /root/saas/search/api/launch.yaml
    envsubst < /root/saas/search/ui/launch-v2.yaml.tpl > /root/saas/search/ui/launch.yaml
    envsubst < /root/saas/search/ui/launch-v2-dev.yaml.tpl > /root/saas/search/ui/launch-dev.yaml
 

    if [[ "$IMAGE_BUILD_ENABLE" == "true" ]] ; then
  
        cd /root/saas/search/api/
        /root/swcli --config /swcli/swcli.yaml app-package oneflow --app-id=search --stage=prod --namespace=${NAMESPACE_ID} --tags="release=sreworks/x86_64" --arch=x86 --cluster=master --path=./launch.yaml --disable-dir-check

        if [[ "$IMPORT_FRONTEND" == "true" ]] ; then
            
            envsubst < /root/saas/search/ui/launch-v2.yaml.tpl > /root/saas/search/ui/launch.yaml
            envsubst < /root/saas/search/ui/launch-v2-dev.yaml.tpl > /root/saas/search/ui/launch-dev.yaml
            result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id search --filepath /root/saas/search/ui/search-auto.zip --print-only-app-package-id=true --reset-version=true)

            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage prod --app-id search --path /root/saas/search/ui/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
            /root/swcli --config /swcli/swcli.yaml deployment launch --namespace ${NAMESPACE_ID} --stage dev --app-id search --path /root/saas/search/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master
        fi

    else

      cd /root/saas/search/

      sh /app/core-action-service-check.sh
      
      echo "" > merge-launch.yaml
      cat /root/saas/search/api/launch.yaml >> merge-launch.yaml
      echo "---" >> merge-launch.yaml
      cat /root/saas/search/ui/launch.yaml >> merge-launch.yaml
      cat merge-launch.yaml | python /app/reduce.py > launch.yaml
      
      result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id search --filepath /root/saas/search/search.zip --print-only-app-package-id=true --reset-version=true)

      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage prod --app-id search --path /root/saas/search/launch.yaml --app-package-id $result --arch x86 --wait=true --cluster master
      /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace ${NAMESPACE_ID} --stage dev --app-id search --path /root/saas/search/ui/launch-dev.yaml --app-package-id $result --arch x86 --wait=true --cluster master

    fi



  saas-dataops-grafana-import.sh: |
    
    set -e
    set -x 

    cd /root

    until $(curl --silent --fail --show-error --output /dev/null http://admin:${GRAFANA_ADMIN_PASSWORD}@${SAAS_STAGE_ID}-dataops-grafana.${NAMESPACE_DATAOPS}/api/datasources); do
      printf '.' ; sleep 1 ;
    done ;


      for file in /root/saas/dataops/ui/grafana/datasource/*.json ; do
        if [ -e "$file" ] ; then
          echo "importing $file" &&
          curl --silent --fail --show-error \
            --request POST http://admin:${GRAFANA_ADMIN_PASSWORD}@${SAAS_STAGE_ID}-dataops-grafana.${NAMESPACE_DATAOPS}/api/datasources \
            --header "Content-Type: application/json" \
            --data-binary "@$file" ;
          echo "" ;
        fi
      done ;

      for file in /root/saas/dataops/ui/grafana/dashboard/*.json ; do
        if [ -e "$file" ] ; then
          echo "importing $file" &&
          curl --silent --fail --show-error \
            --request POST http://admin:${GRAFANA_ADMIN_PASSWORD}@${SAAS_STAGE_ID}-dataops-grafana.${NAMESPACE_DATAOPS}/api/dashboards/import \
            --header "Content-Type: application/json" \
            --data-binary "@$file" ;
          echo "" ;
        fi
      done


  saas-demoapp.sh: |

    set -e
    set -x

    sh /app/core-deploy-check.sh
    
    cd /root/saas/app/
    checkDemoApp=$(python /root/saas/app/initDemoApp.py)
    echo $checkDemoApp
    if [[ "$checkDemoApp" == "NO" ]] ; then
       result=$(/root/swcli --config /swcli/swcli.yaml app-package import --app-id sreworks1 --filepath /root/saas/app/demoApp.zip --print-only-app-package-id=true --reset-version=true)
       /root/swcli --config /swcli/swcli.yaml deployment launch  --namespace sreworks --stage prod --app-id sreworks1 --path /root/saas/app/launch-demoApp.yaml --app-package-id $result --arch x86 --wait=true --cluster master
    fi

  saas-sleep.sh: |
    sleep 999999999999

kind: ConfigMap
metadata:
  name: init-run

{{- end -}}
